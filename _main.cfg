#ifdef MULTIPLAYER
#define RECENT_OVERLAY
"misc/hero-icon.png"
#enddef
#define SIDE_DEF SIDE LEADER RECR
	[side]
		side={SIDE}
		user_team_name="Player {SIDE}"
		team_name="p{SIDE}"
		canrecruit=yes
		controller=human
		controller_lock=yes
		gold=10000
		gold_lock=yes
		fog=no
		shroud=no
		income=38
		income_lock=yes
		team_lock=yes
		faction_lock=yes
		leader_lock=yes
		village_gold=0
		village_support=0
		faction=Custom
		type={LEADER}
		recruit={RECR}
		[modifications]
			[object]
				[effect]
					apply_to=movement
					set=0
				[/effect]
				[effect]
					apply_to=remove_attacks
				[/effect]
				[effect]
					apply_to=loyal
				[/effect]
				[effect]
					apply_to=hitpoints
					increase_total=-100%
				[/effect]
			[/object]
		[/modifications]
	[/side]
#enddef

#define CONNECT6_SCENARIO ID NAME MAP
[multiplayer]
	id={ID}
	name={NAME}
	require_scenario=no
	description="Connect 6 is a tic-tac-toe-like game where each player puts 2 units per turn on the board (the first turn of the first player is placing just one unit) and tries to get 6 or more units placed in a row."
	map_data={MAP}
	experience_modifier=100
	{SIDE_DEF 1 "Wose Shaman" "Wose"}
	{SIDE_DEF 2 "Wraith" "Ghost"}
	{DEFAULT_MUSIC_PLAYLIST}
	{INDOORS}
	fog=no
	shroud=no
	[event]	
		name=preload
		first_time_only=no
		[objectives]
			note="It may be useful to turn on grid in Preferences > Display > Show grid"
			[objective]
				description=_"Place 6 or more units in a row"
				condition=win
			[/objective]
			[objective]
				description=_"Your opponent places 6 or more units in a row before you"
				condition=lose
			[/objective]
			[note]
				description="In order to place a unit recruit on a desired hex"
			[/note]
			[note]
				description="On the first turn player 1 places 1 unit. Then each turn each player places 2 units"
			[/note]
			[note]
				description="Units placed on the previous turn are indicated with grey marks over them"
			[/note]
		[/objectives]
	[/event]
	[event]
		name=prerecruit
		first_time_only=no
		[modify_unit]
			[filter]
				id=$unit.id
			[/filter]
			[object]
				[effect]
					apply_to=movement
					set=0
				[/effect]
				[effect]
					apply_to=remove_attacks
				[/effect]
				[effect]
					apply_to=loyal
				[/effect]
				[effect]
					apply_to=hitpoints
					increase_total=-100%
				[/effect]
			[/object]
		[/modify_unit]
		[unit_overlay]
			id=$unit.id
			image={RECENT_OVERLAY}
		[/unit_overlay]
	[/event]
	[event]
		name=recruit
		first_time_only=no
		[if]
			[variable]
				name=turn_number
				equals=1
			[/variable]
			[and]
				[variable]
					name=side_number
					equals=1
				[/variable]
			[/and]
			[then]
				[end_turn]
				[/end_turn]
			[/then]
		[/if]
		{VARIABLE_OP recruit_counter add 1}
		[lua]
			code = <<
local w,h = wesnoth.get_map_size()
local map_w = w - 1
local map_h = h
local seq={}
for x=1,map_w do
	seq = {}
	for y=1,map_h do
		local u = wesnoth.units.get(x, y)
		if u == nil or u.side ~= wml.variables["side_number"] then
			seq = {}
		else
			table.insert(seq, u)
		end
		if #seq >= 6 then
			goto finale
		end
	end
end
-- NB: it counts some diagonals twice (starting without one hex) For ex 12,1 and 11,1 are on the same diagonal but considered two different starting hexes

-- bottom-right diagonals
-- 1st diagonal is the up-right corner
for diag=1,(map_w + map_h - 1) do
	seq = {}
	-- uppest hex of a diagonal
	local x = map_w - diag + 1
	local y = 1
	if x < 1 then
		y = 2 - x
		x = 1
	end
	repeat
		local u = wesnoth.units.get(x, y)
		if u == nil or u.side ~= wml.variables["side_number"] then
			seq = {}
		else
			table.insert(seq, u)
		end
		if #seq >= 6 then
			goto finale
		end
		-- hexes go (1,1), (2,1), (3,2), (4,2), ...
		if x % 2 == 0 then
			y = y + 1
		end
		x = x + 1
	until (x > map_w) or (y > map_h)
end

-- up-right diagonals
for diag=1,(map_w + map_h - 1) do
	seq = {}
	-- uppest hex of a diagonal
	local x = 1
	local y = diag
	if y > map_h then
		x = 1 + y - map_h
		y = map_h
	end
	repeat
		local u = wesnoth.units.get(x, y)
		if u == nil or u.side ~= wml.variables["side_number"] then
			seq = {}
		else
			table.insert(seq, u)
		end
		if #seq >= 6 then
			goto finale
		end
		-- hexes go (4,10), (5,10), (6,9), (7,9), ...
		if x % 2 == 1 then
			y = y - 1
		end
		x = x + 1
	until (x > map_w) or (y < 1)
end

::finale::
if #seq >= 6 then
	for i, v in ipairs(seq) do
		wesnoth.wml_actions.unit_overlay{x = v.x, y = v.y, image="misc/laurel.png"}
	end
	wesnoth.wml_actions.message{canrecruit=true, side = wml.variables["side_number"], message="I won!"}
	wesnoth.wml_actions.kill{canrecruit=true, {"not", {side = wml.variables["side_number"]}}}
end	
>>
		[/lua]
		[if]
			[variable]
				name=recruit_counter
				equals=2
			[/variable]
			[then]
				[end_turn]
				[/end_turn]
			[/then]
		[/if]
	[/event]
	[event]
		name=turn refresh
		first_time_only=no
		[modify_unit]
			[filter]
				side=$side_number
			[/filter]
			attacks_left=0
		[/modify_unit]
		[remove_unit_overlay]
			side=$side_number
			image={RECENT_OVERLAY}
		[/remove_unit_overlay]
		[disallow_end_turn]
			reason="You must place units on the board (by recruiting in a desired hex)"
		[/disallow_end_turn]
		{VARIABLE recruit_counter 0}
	[/event]
[/multiplayer]
#enddef
{CONNECT6_SCENARIO "connect6_13x13" "Connect6 (13x13)" "{./maps/Connect6_13x13.map}"}
{CONNECT6_SCENARIO "connect6_29x13" "Connect6 (29x13)" "{./maps/Connect6_29x13.map}"}
{CONNECT6_SCENARIO "connect6_19x19" "Connect6 (19x19)" "{./maps/Connect6_19x19.map}"}
{CONNECT6_SCENARIO "connect6_29x29" "Connect6 (29x29)" "{./maps/Connect6_29x29.map}"}
#undef CONNECT6_SCENARIO
#undef SIDE_DEF
#undef RECENT_OVERLAY
#endif
